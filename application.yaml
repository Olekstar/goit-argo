apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mlflow
  namespace: infra-tools
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://community-charts.github.io/helm-charts
    chart: mlflow
    targetRevision: "0.1.0"
    helm:
      values: |
        # MLflow конфігурація
        image:
          repository: python
          tag: "3.9-slim"
        
        # Додаткові команди для встановлення MLflow
        command: ["/bin/sh"]
        args: ["-c", "pip install mlflow && mlflow server --host=0.0.0.0 --port=5000 --backend-store-uri=sqlite:///mlflow.db --default-artifact-root=/mlflow/artifacts"]
        
        # MLflow server налаштування
        mlflow:
          backendStoreUri: "sqlite:///mlflow.db"
          defaultArtifactRoot: "/mlflow/artifacts"
          host: "0.0.0.0"
          port: 5000
          workers: 1
        
        # Service налаштування
        service:
          type: ClusterIP
          port: 5000
          targetPort: 5000
        
        # Persistence для даних
        persistence:
          enabled: true
          size: 10Gi
          storageClass: gp2
          accessMode: ReadWriteOnce
        
        # Resources
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        # Ingress (опціонально)
        ingress:
          enabled: false
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 1000
        
        # Pod security context
        podSecurityContext:
          fsGroup: 1000
        
        # Node selector
        nodeSelector: {}
        
        # Tolerations
        tolerations: []
        
        # Affinity
        affinity: {}
        
        # Environment variables
        env: []
        
        # Extra volumes
        extraVolumes: []
        
        # Extra volume mounts
        extraVolumeMounts: []
        
        # Init containers
        initContainers: []
        
        # Sidecar containers
        sidecars: []
        
        # Service account
        serviceAccount:
          create: true
          name: ""
          annotations: {}
        
        # Pod annotations
        podAnnotations: {}
        
        # Pod labels
        podLabels: {}
        
        # Service annotations
        serviceAnnotations: {}
        
        # Service labels
        serviceLabels: {}
        
        # Deployment annotations
        deploymentAnnotations: {}
        
        # Deployment labels
        deploymentLabels: {}
        
        # ConfigMap
        configMap:
          create: false
          data: {}
        
        # Secret
        secret:
          create: false
          data: {}
        
        # Liveness probe
        livenessProbe:
          enabled: true
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe
        readinessProbe:
          enabled: true
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe
        startupProbe:
          enabled: false
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Horizontal Pod Autoscaler
        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 10
          targetCPUUtilizationPercentage: 80
          targetMemoryUtilizationPercentage: 80
        
        # Pod Disruption Budget
        podDisruptionBudget:
          enabled: false
          minAvailable: 1
          maxUnavailable: ""
        
        # Network Policy
        networkPolicy:
          enabled: false
          ingress: []
          egress: []
        
        # Service Monitor (для Prometheus)
        serviceMonitor:
          enabled: false
          namespace: ""
          labels: {}
          annotations: {}
          interval: 30s
          scrapeTimeout: 10s
          path: /metrics
          port: ""
        
        # Pod Monitor (для Prometheus)
        podMonitor:
          enabled: false
          namespace: ""
          labels: {}
          annotations: {}
          interval: 30s
          scrapeTimeout: 10s
          path: /metrics
          port: ""
        
        # Grafana Dashboard
        grafanaDashboard:
          enabled: false
          namespace: ""
          labels: {}
          annotations: {}
          dashboard: {}
        
        # Tests
        tests:
          enabled: false
          image:
            repository: curlimages/curl
            tag: "latest"
            pullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
  destination:
    server: https://kubernetes.default.svc
    namespace: application
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
